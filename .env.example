# OpsFlow Guardian 2.0 - Environment Configuration
# Copy this file to .env and configure your actual values

# ================================
# GEMINI 2.5 PRO CONFIGURATION (PRIMARY AI)
# ================================
GOOGLE_API_KEY=AIzaSyCsjYYDq6aNLkW4r9_VgvNP8v8nZQeNzP0
GEMINI_MODEL=gemini-2.0-flash-exp

# ================================
# FALLBACK AI PROVIDERS (OPTIONAL)
# ================================
OPENAI_API_KEY=your_openai_api_key_here
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# ================================
# APPLICATION CONFIGURATION
# ================================
APP_NAME=OpsFlow Guardian 2.0
VERSION=2.0.0
DEBUG=true
ENVIRONMENT=development

# ================================
# SECURITY CONFIGURATION
# ================================
SECRET_KEY=your_very_secure_secret_key_here_minimum_32_characters_change_this
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# ================================
# DATABASE CONFIGURATION
# ================================
DATABASE_URL=postgresql://opsflow:password@localhost:5432/opsflow_guardian
# For testing
DATABASE_URL_TEST=postgresql://opsflow:password@localhost:5432/opsflow_guardian_test

# ================================
# REDIS CONFIGURATION
# ================================
REDIS_URL=redis://localhost:6379
REDIS_CACHE_URL=redis://localhost:6379/1

# ================================
# PORTIA SDK CONFIGURATION
# ================================
PORTIA_API_KEY=your_portia_api_key_here_optional

# ================================
# EXTERNAL SERVICE INTEGRATIONS
# ================================

# Google Services
GOOGLE_CLIENT_ID=your_google_oauth_client_id
GOOGLE_CLIENT_SECRET=your_google_oauth_client_secret

# Slack Integration
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token
SLACK_APP_TOKEN=xapp-your-slack-app-token

# Notion Integration
NOTION_TOKEN=secret_your_notion_integration_token

# Jira Integration
JIRA_SERVER=https://your-company.atlassian.net
JIRA_USERNAME=your_jira_email@company.com
JIRA_API_TOKEN=your_jira_api_token

# Payment Processing
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key

# Email Services
SENDGRID_API_KEY=SG.your_sendgrid_api_key

# SMS Services
TWILIO_ACCOUNT_SID=your_twilio_account_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token

# ================================
# MONITORING AND LOGGING
# ================================
LOG_LEVEL=INFO
ENABLE_METRICS=true
ENABLE_TRACING=true

# ================================
# APPLICATION LIMITS
# ================================
MAX_FILE_SIZE_MB=50
UPLOAD_DIR=./uploads
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_BURST=10

# ================================
# WEBSOCKET CONFIGURATION
# ================================
WS_MAX_CONNECTIONS=100
WS_HEARTBEAT_INTERVAL=30

# ================================
# WORKFLOW ENGINE CONFIGURATION
# ================================
MAX_WORKFLOW_STEPS=50
MAX_EXECUTION_TIME_MINUTES=60
MAX_CONCURRENT_WORKFLOWS=10

# ================================
# CORS CONFIGURATION
# ================================
ALLOWED_ORIGINS=["http://localhost:5173","http://localhost:3000","http://127.0.0.1:5173","http://127.0.0.1:3000"]

# ================================
# DEPLOYMENT CONFIGURATION
# ================================
# For production, set these appropriately
# DATABASE_URL=postgresql://user:password@prod-db:5432/opsflow_guardian
# REDIS_URL=redis://prod-redis:6379
# DEBUG=false
# ENVIRONMENT=production
# Add your production domain to ALLOWED_ORIGINS

# ================================
# GEMINI API SETUP INSTRUCTIONS
# ================================
# 1. Go to https://makersuite.google.com/app/apikey
# 2. Click "Create API Key"
# 3. Copy the key and paste it as GOOGLE_API_KEY above
# 4. Enable the Generative Language API in Google Cloud Console
# 5. The API key is free for moderate usage - perfect for development!
#
# Gemini 2.5 Pro Features:
# - 2M token context window
# - Advanced reasoning capabilities
# - Code understanding and generation
# - Multimodal input support
# - Very cost-effective ($0.00025 per 1K tokens)
#
# For production, consider setting up quota limits and monitoring
